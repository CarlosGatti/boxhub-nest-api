generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../@generated"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Storage {
  id         Int              @id @default(autoincrement())
  name       String
  members    StorageMember[]  // ← Relacionamento M:N com usuários
  containers Container[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model StorageMember {
  id         Int      @id @default(autoincrement())
  userId     Int
  storageId  Int
  role       StorageRole @default(MEMBER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  storage    Storage  @relation(fields: [storageId], references: [id])

  @@unique([userId, storageId])
}

model Container {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  qrCode      String        // QR Code para identificação
  code        String        @unique // Código para identificação adicional
  storageId    Int
  storage      Storage        @relation(fields: [storageId], references: [id])
  categories  Category[]    @relation("ContainerCategories")
  items       Item[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Item {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  imageUrl    String        // URL para a imagem do item
  quantity    Int
  category    String        // Categoria adicional, se necessário
  containerId Int
  container   Container     @relation(fields: [containerId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  containers  Container[]  @relation("ContainerCategories")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id                     Int                  @id @default(autoincrement())
  email                  String               @unique
  password               String
  firstName              String
  lastName               String
  nickname               String?
  public                 Boolean              @default(false)
  role                   Role                 @default(USER)
  emailVerified          Boolean              @default(false)
  profilePicture         String?
  about                  String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  isPremium              Boolean              @default(false)
  subscriptionId         String?              // LemonSqueezy ID
  expiresAt              DateTime?
  willExpireAt           DateTime?            // Expiração futura agendada
  
  storageMemberships     StorageMember[] 
  logs                   Log[]

  // Novas relações
  projectResponsible  Project[]           // Projetos onde o usuário é responsável
  constructionLogs       ConstructionLog[]
  logComments           LogComment[]
  logCommentReplies     LogCommentReply[]
  responsibleInspections  PermitInspection[] // Inspections where the user is responsible
  receivedMaterials   MaterialEntry[]    // Materiais recebidos pelo usuário
  @@index([email], map: "userEmail")
}


model Log {
  id          Int        @id @default(autoincrement())
  action      LogAction
  userId      Int?
  user        User?      @relation(fields: [userId], references: [id])
  details     String?
  route       String?    // Rota acessada (ex: "/dashboard" ou "/item/:id")
  metadata    Json?      // Dados adicionais sobre o evento (ex: { itemId: 123, buttonName: "BuyNow" })
  ipAddress   String?
  createdAt   DateTime   @default(now())
}


enum LogAction {
  USER_LOGIN
  USER_LOGOUT
  ITEM_CREATED
  ITEM_UPDATED
  ITEM_DELETED
  CONTAINER_CREATED
  CONTAINER_DELETED
  BUTTON_CLICKED
  PAGE_VIEWED
  SEARCH_USED
  CUSTOM_ACTION
  REQUEST_PASSWORD_RESET
  PASSWORD_RESET
  USER_REGISTERED
  USER_PROFILE_UPDATED
  USER_DELETED
  STORAGE_CREATED
  STORAGE_DELETED
  SUBCONTRACTOR_CREATED
  SUBCONTRACTOR_UPDATED
  SUBCONTRACTOR_DELETED
  SUBCONTRACTOR_VIEWED
}

model Subcontractor {
  id                     Int           @id @default(autoincrement())
  companyName            String
  contactName            String
  email                  String
  phone                  String
  trade                  String
  bankAccount            String
  paymentPreference      String
  notes                  String?
  priority               Boolean       @default(false)
  createdViaPublicForm   Boolean       @default(false)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  insurances             Insurance[]
}

model Insurance {
  id                 Int           @id @default(autoincrement())
  subcontractorId    Int
  company            String
  expiration         DateTime
  documentUrl        String
  createdAt          DateTime      @default(now())
  subcontractor      Subcontractor @relation(fields: [subcontractorId], references: [id])

  @@index([subcontractorId])
}

model Project {
  id             Int               @id @default(autoincrement())
  name           String
  client         String
  location       String
  status         ProjectStatus     @default(PLANNING)
  startDate      DateTime
  endDate        DateTime?
  responsibleId  Int               // Referência ao User
  responsible    User              @relation(fields: [responsibleId], references: [id])
  logs           ConstructionLog[]
  documents      ProjectDocument[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  materials     MaterialEntry[]  // Materiais recebidos
  permits        PermitInspection[] // Permits associated with the project
  photos         ProjectPhoto[]    // Fotos do projeto
}

model MaterialEntry {
  id          Int        @id @default(autoincrement())
  projectId   Int
  name        String
  supplier    String
  quantity    Float
  receivedById Int?      // link opcional com User
  receivedBy  User?      @relation(fields:[receivedById], references:[id])
  receivedAt  DateTime
  note        String?
  imageUrls   Json?      // lista de strings

  project     Project    @relation(fields:[projectId], references:[id])

  createdAt   DateTime   @default(now())
}


model ConstructionLog {
  id          Int        @id @default(autoincrement())
  projectId   Int
  userId      Int
  title       String
  description String
  type        LogType       // Observação, Problema, Boa prática, etc.
  images      Json?         // Lista de imagens (URL array)
  createdAt   DateTime      @default(now())

  project     Project       @relation(fields: [projectId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  comments    LogComment[]  // Comentários associados a este log
}

model ProjectDocument {
  id        Int       @id @default(autoincrement())
  projectId Int
  name      String
  fileUrl   String
  type      DocumentType
  createdAt DateTime  @default(now())

  project   Project   @relation(fields: [projectId], references: [id])
}

model LogComment {
  id               Int               @id @default(autoincrement())
  logId            Int
  userId           Int
  content          String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  log              ConstructionLog   @relation(fields: [logId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  replies          LogCommentReply[]
}

model LogCommentReply {
  id               Int               @id @default(autoincrement())
  commentId        Int
  userId           Int
  content          String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  comment          LogComment        @relation(fields: [commentId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
}

model PermitInspection {
  id          Int              @id @default(autoincrement())
  projectId   Int
  number      String           // nº do documento oficial
  kind        PermitKind
  status      PermitStatus     @default(REQUIRED)
  requestedAt DateTime?        // quando envio o pedido
  approvedAt  DateTime?        // quando recebeu aprovação
  fileUrl     String?          // upload do PDF ou imagem

  responsibleId Int?           // quem enviou
  responsible   User?          @relation(fields:[responsibleId], references:[id])

  project     Project          @relation(fields:[projectId], references:[id])

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProjectPhoto {
  id        Int        @id @default(autoincrement())
  projectId Int
  caption   String?
  category  PhotoCategory
  stage     String?       // ex: “Drywall”
  imageUrl  String

  project   Project   @relation(fields:[projectId], references:[id])
  createdAt DateTime  @default(now())
}

enum PhotoCategory {
  BEFORE
  DURING
  AFTER
  ISSUE
  INSPECTION
}

enum PermitKind {
  BUILDING_PERMIT
  ELECTRICAL
  PLUMBING
  INSPECTION_REPORT
  FRAMING
  ROOFING
  HVAC
  CONCRETE
  FLOORING
  OTHER
}

enum PermitStatus {
  REQUIRED
  SENT
  APPROVED
  REJECTED
}


enum LogType {
  OBSERVATION
  ISSUE
  GOOD_PRACTICE
  MATERIAL_RECEIPT
  DAILY_CHECKIN
  OTHER
}

enum DocumentType {
  CONTRACT
  PERMIT
  INVOICE
  PLAN
  PHOTO
  OTHER
}

enum ProjectStatus {
  PLANNING
  EXECUTING
  FINISHED
  ON_HOLD
  CANCELED
}


enum ServiceType {
  FRAMING
  ELECTRICAL
  PLUMBING
  PAINTING
  ROOFING
  DRYWALL
  HVAC
  CONCRETE
  FLOORING
  OTHER
}

enum PaymentMethod {
  CHECK
  DEPOSIT
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum MembershipStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum TypeOfDeparture {
  VOLUNTARY
  INVOLUNTARY
  RETIREMENT
  OTHER // Quando selecionado "Outro", o campo `otherDetails` pode ser usado para especificação
}

enum StorageRole {
  ADMIN
  MEMBER
}

