generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../@generated"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Storage {
  id         Int              @id @default(autoincrement())
  name       String
  members    StorageMember[]  // ← Relacionamento M:N com usuários
  containers Container[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model StorageMember {
  id         Int      @id @default(autoincrement())
  userId     Int
  storageId  Int
  role       StorageRole @default(MEMBER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  storage    Storage  @relation(fields: [storageId], references: [id])

  @@unique([userId, storageId])
}

model Container {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  qrCode      String        // QR Code para identificação
  code        String        @unique // Código para identificação adicional
  storageId    Int
  storage      Storage        @relation(fields: [storageId], references: [id])
  categories  Category[]    @relation("ContainerCategories")
  items       Item[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Item {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  imageUrl    String        // URL para a imagem do item
  quantity    Int
  category    String        // Categoria adicional, se necessário
  containerId Int
  container   Container     @relation(fields: [containerId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  containers  Container[]  @relation("ContainerCategories")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id                     Int                  @id @default(autoincrement())
  email                  String               @unique
  password               String
  firstName              String
  lastName               String
  nickname               String?
  public                 Boolean              @default(false)
  role                   Role                 @default(USER)
  emailVerified          Boolean              @default(false)
  profilePicture         String?
  about                  String?
  linkedinUrl            String?
  twitterUrl             String?
  githubUrl              String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  adminCommunities       Community[]
  memberCommunities      CommunityMember[]
  events                 Event[]
  eventMember            EventMember[]
  eventTicket            EventTicket[]
  following              Follows[]            @relation("follower")
  followers              Follows[]            @relation("following")
  posts                  Post[]
  publications           Publication[]
  allPublicationComments PublicationComment[]
  allPublicationLikes    PublicationLike[]
  storageMemberships     StorageMember[] 
  @@index([email], map: "userEmail")

}


model Follows {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])

  @@index([followerId], map: "followerId")
  @@index([followingId], map: "followingId")
}

model Publication {
  id          Int                  @id @default(autoincrement())
  description String
  published   Boolean              @default(true)
  userId      Int?
  postId      Int
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  visibility  Visibility           @default(PUBLIC)
  eventId     Int?
  communityId Int?
  community   Community?           @relation(fields: [communityId], references: [id])
  event       Event?               @relation(fields: [eventId], references: [id])
  post        Post                 @relation(fields: [postId], references: [id])
  user        User?                @relation(fields: [userId], references: [id])
  comments    PublicationComment[]
  likes       PublicationLike[]
}

model PublicationLike {
  id            Int         @id @default(autoincrement())
  userId        Int
  publicationId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publication   Publication @relation(fields: [publicationId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@index([userId], map: "publicationLikeuserId")
  @@index([publicationId], map: "publicationLikepublicationId")
}

model PublicationComment {
  id            Int         @id @default(autoincrement())
  content       String
  userId        Int
  publicationId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publication   Publication @relation(fields: [publicationId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@index([userId], map: "publicationCommentUserId")
  @@index([publicationId], map: "publicationCommentPublicationId")
}

model Post {
  id            Int           @id @default(autoincrement())
  title         String?
  content       String?
  published     Boolean       @default(true)
  authorId      Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  publicationId Int?
  visibility    Visibility    @default(PUBLIC)
  images        String[]
  author        User?         @relation(fields: [authorId], references: [id])
  publication   Publication[]
}

model EventAddress {
  id        Int      @id @default(autoincrement())
  address   String
  city      String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event[]
}

model EventOnlineDetail {
  id          Int      @id @default(autoincrement())
  platform    String
  link        String
  joinCode    String?
  joinDetails String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event[]
}

model EventMember {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  eventId   Int
  userId    Int?
  status    MembershipStatus @default(PENDING)
  joinedAt  DateTime?
  leftAt    DateTime?
  role      EventMemberRole  @default(MEMBER)
  event     Event            @relation(fields: [eventId], references: [id])
  user      User?            @relation(fields: [userId], references: [id])
}

model EventTicket {
  id         Int       @id @default(autoincrement())
  beeped     Boolean
  expire     DateTime
  userEmail  String
  eventId    Int
  beepedTime DateTime?
  valid      Boolean   @default(true)
  event      Event     @relation(fields: [eventId], references: [id])
  user       User      @relation(fields: [userEmail], references: [email])
}

model Event {
  id                  Int                @id @default(autoincrement())
  title               String
  content             String?
  published           Boolean            @default(true)
  ownerId             Int?
  startDate           DateTime
  endDate             DateTime
  eventOnlineDetailId Int?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  eventAddressId      Int?
  visibility          Visibility         @default(PUBLIC)
  banner              String?
  communityId         Int?
  Community           Community?         @relation(fields: [communityId], references: [id])
  address             EventAddress?      @relation(fields: [eventAddressId], references: [id])
  onlineDetails       EventOnlineDetail? @relation(fields: [eventOnlineDetailId], references: [id])
  owner               User?              @relation(fields: [ownerId], references: [id])
  members             EventMember[]
  tickets             EventTicket[]
  publications        Publication[]
}

model CommunityMember {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  communityId Int
  userId      Int?
  status      MembershipStatus    @default(PENDING)
  joinedAt    DateTime?
  leftAt      DateTime?
  role        CommunityMemberRole @default(MEMBER)
  community   Community           @relation(fields: [communityId], references: [id])
  user        User?               @relation(fields: [userId], references: [id])

  @@index([userId], map: "communityMemberUserId")
  @@index([communityId], map: "communityMemberCommunityId")
}

model CommunityPlan {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  communityId Int?
  community   Community?

  @@index([communityId], map: "communityPlanCommunityId")
}

model Community {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  description       String
  banner            String?
  profilePicture    String?
  visibility        Visibility        @default(PUBLIC)
  published         Boolean?          @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  ownerId           Int?
  communityPlanId   Int?              @unique
  postEnabledRole   CommunityPrivacy  @default(ALL)
  inviteEnabledRole CommunityPrivacy  @default(ALL)
  parentCommunityId Int?
  plan              CommunityPlan?    @relation(fields: [communityPlanId], references: [id])
  owner             User?             @relation(fields: [ownerId], references: [id])
  parentCommunity   Community?        @relation("ParentCommunity", fields: [parentCommunityId], references: [id])
  groups            Community[]       @relation("ParentCommunity")
  members           CommunityMember[]
  events            Event[]
  facets            Facet[]
  publications      Publication[]

  @@index([ownerId], map: "communityOwnerId")
  @@index([communityPlanId], map: "communityPlanId")
}

model FacetValue {
  id        Int      @id @default(autoincrement())
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  facetId   Int?
  Facet     Facet?   @relation(fields: [facetId], references: [id])
}

model Facet {
  id          Int          @id @default(autoincrement())
  code        String
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  communityId Int?
  Community   Community?   @relation(fields: [communityId], references: [id])
  values      FacetValue[]
}

model Pillar {
  id           Int         @id @default(autoincrement())
  name         String
  processes    Process[]   @relation("PillarToProcess")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Process {
  id              Int         @id @default(autoincrement())
  name            String
  description     String?
  pillarId        Int
  themes          Theme[]     @relation("ProcessToTheme")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  pillar          Pillar      @relation("PillarToProcess", fields: [pillarId], references: [id])
}

model Theme {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  processId   Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  process     Process     @relation("ProcessToTheme", fields: [processId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum CommunityMemberRole {
  OWNER
  MEMBER
  ADMIN
}

enum EventMemberRole {
  OWNER
  MEMBER
  ADMIN
}

enum CommunityPrivacy {
  OWNER
  MEMBER
  ADMIN
  ALL
}

enum MembershipStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum TypeOfDeparture {
  VOLUNTARY
  INVOLUNTARY
  RETIREMENT
  OTHER // Quando selecionado "Outro", o campo `otherDetails` pode ser usado para especificação
}

enum StorageRole {
  ADMIN
  MEMBER
}

