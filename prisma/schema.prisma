generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../@generated"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Storage {
  id         Int              @id @default(autoincrement())
  name       String
  members    StorageMember[]  // ← Relacionamento M:N com usuários
  containers Container[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model StorageMember {
  id         Int      @id @default(autoincrement())
  userId     Int
  storageId  Int
  role       StorageRole @default(MEMBER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  storage    Storage  @relation(fields: [storageId], references: [id])

  @@unique([userId, storageId])
}

model Container {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  qrCode      String        // QR Code para identificação
  code        String        @unique // Código para identificação adicional
  storageId    Int
  storage      Storage        @relation(fields: [storageId], references: [id])
  categories  Category[]    @relation("ContainerCategories")
  items       Item[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Item {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  imageUrl    String        // URL para a imagem do item
  quantity    Int
  category    String        // Categoria adicional, se necessário
  containerId Int
  container   Container     @relation(fields: [containerId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  containers  Container[]  @relation("ContainerCategories")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id                     Int                  @id @default(autoincrement())
  email                  String               @unique
  password               String
  firstName              String
  lastName               String
  nickname               String?
  public                 Boolean              @default(false)
  role                   Role                 @default(USER)
  emailVerified          Boolean              @default(false)
  profilePicture         String?
  about                  String?
  linkedinUrl            String?
  twitterUrl             String?
  githubUrl              String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  isPremium              Boolean  @default(false)
  subscriptionId         String?  // LemonSqueezy ID
  expiresAt              DateTime?
  willExpireAt           DateTime? //Expiração futura agendada
  storageMemberships     StorageMember[] 
  logs                   Log[]
  @@index([email], map: "userEmail")

}

model Log {
  id          Int        @id @default(autoincrement())
  action      LogAction
  userId      Int?
  user        User?      @relation(fields: [userId], references: [id])
  details     String?
  route       String?    // Rota acessada (ex: "/dashboard" ou "/item/:id")
  metadata    Json?      // Dados adicionais sobre o evento (ex: { itemId: 123, buttonName: "BuyNow" })
  ipAddress   String?
  createdAt   DateTime   @default(now())
}


enum LogAction {
  USER_LOGIN
  USER_LOGOUT
  ITEM_CREATED
  ITEM_DELETED
  CONTAINER_CREATED
  CONTAINER_DELETED
  BUTTON_CLICKED
  PAGE_VIEWED
  SEARCH_USED
  CUSTOM_ACTION // Para ações diversas
}


enum Role {
  USER
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum CommunityMemberRole {
  OWNER
  MEMBER
  ADMIN
}

enum EventMemberRole {
  OWNER
  MEMBER
  ADMIN
}

enum CommunityPrivacy {
  OWNER
  MEMBER
  ADMIN
  ALL
}

enum MembershipStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum TypeOfDeparture {
  VOLUNTARY
  INVOLUNTARY
  RETIREMENT
  OTHER // Quando selecionado "Outro", o campo `otherDetails` pode ser usado para especificação
}

enum StorageRole {
  ADMIN
  MEMBER
}

